@module "Cars", ->
    class PositionMarkerBuilder extends Gmaps.Google.Builders.Marker
        create_marker: ->
            options = _.extend @marker_options(), @rich_marker_options()
            @serviceObject = new RichMarker options

        rich_marker_options: ->
            marker = document.createElement("div")
            marker.setAttribute('class', 'custom_marker')
            marker.innerHTML = this.args.custom_marker
            _.extend(@marker_options(), { flat: true })
            { content: marker }

        create_infowindow: ->
            return null unless _.isString @args.position_infowindow

            boxText = document.createElement("div")
            boxText.setAttribute("class", 'position_infowindow')
            boxText.innerHTML = @args.position_infowindow
            @infowindow = new InfoBox(@infobox(boxText))

        infobox: (boxText)->
            content: boxText
            pixelOffset: new google.maps.Size(-60,-60)
            boxStyle:
                width: "170px"

    class @Maps
        @refresh : () ->
            if window.current_mode == "road"
                Maps.switch_to_pins(window.map_data)
            else if window.current_mode == "one_pin"
                Cars.Show.one(window.map_data)
            else
                Cars.Show.all(window.map_data)

        @focus_position : (lat, lng) ->
            position = new (google.maps.LatLng)(lat, lng)
            window.map.setCenter(position)
            window.map.setZoom(19)

        @switch_to_pins : (data) ->

            window.current_mode = "road"
            window.map_data = data
            data_for_points  = []

            handler = Gmaps.build("Google", builders: { Marker: PositionMarkerBuilder } )
            handler.buildMap { provider: { scrollwheel: false }, internal: { id: gon.map_id }}, ->

                console.log(data)

                i = 1

                for one_marker in data

                    date = one_marker.infowindow.split('/')[0]
                    status = one_marker.infowindow.split('/')[1]

                    if status == "start" || status == "stop"

                        if status == "start"
                            pin = "<span class='badge badge-success'>"+(i+1)+"</span>"

                        if status == "stop"
                            pin = "<span class='badge badge-danger'>"+(i+1)+"</span>"
                            i++

                        content = "<div><b>Date:</b><br/>" + date + "</div>"

                        marker = handler.addMarker
                            lat:               one_marker.lat
                            lng:               one_marker.lng
                            custom_marker:     pin
                            position_infowindow: content

                        handler.bounds.extendWith(marker)

                        data_for_points.push(one_marker)


                points = []
                for point, i in data
                    hash = {lat: data[i]["lat"], lng: data[i]["lng"]}
                    points[i] = hash

                console.log(points.length)
                points.pop()
                console.log(points.length)
                console.log(points)

                polyline = handler.addPolyline(points,
                    { strokeColor: '#FF0000'}
                );

                console.log('test :')
                #console.log(polyline[0])

                #handler.bounds.extend(polyline[0]);
                #handler.bounds.extend(polyline[polyline.length-1]);
                handler.fitMapToBounds()

                handler.getMap().setZoom(11)

                window.handler = handler

        @switch_to_directions : (data) ->

            # Set current map view mode to directions (instead of just showing little markers)

            window.current_mode = "directions"

            directionsDisplay = new (google.maps.DirectionsRenderer) {suppressMarkers: true }

            directionsService = new (google.maps.DirectionsService)

            calcRoute = ->

                origin_lat = data[0].lat
                origin_lng = data[0].lng
                destin_lat = data[data.length-1].lat
                destin_lng = data[data.length-1].lng

                origin = new (google.maps.LatLng)(origin_lat, origin_lng)
                destination = new (google.maps.LatLng)(destin_lat, destin_lng)

                waypts = []
                i = 1
                while i < data.length - 2
                    status = data[i].infowindow.split('/')[1]
                    if status == "start"
                        waypts.push
                            location: new (google.maps.LatLng)(data[i].lat, data[i].lng)
                            stopover: true
                    i++

                waypts.pop()
                console.log waypts.length

                request =
                    origin: origin
                    destination: destination
                    travelMode: google.maps.TravelMode.DRIVING
                    waypoints: waypts
                    optimizeWaypoints: false

                directionsService.route request, (response, status) ->
                    if status == google.maps.DirectionsStatus.OK
                        directionsDisplay.setDirections response
                        window.directionsDisplayResponse = response
                    else
                        alert(status)
                    return

            calcRoute()

            handler = Gmaps.build("Google", builders: { Marker: PositionMarkerBuilder } )
            handler.buildMap { provider: { scrollwheel: false }, internal: { id: gon.map_id }}, ->
                window.handler = handler
                window.data = data
                window.map = handler.getMap()
                directionsDisplay.setMap handler.getMap()

                totalDistance = 0
                totalDuration = 0
                legs = window.directionsDisplayResponse.routes[0].legs
                i = 0
                while i < legs.length
                  totalDistance += legs[i].distance.value
                  totalDuration += legs[i].duration.value
                  ++i

                $('.map-road-details').show().text (totalDistance/1000).toFixed(2)+" km"
                # | Estimated duration : "+(new Date).clearTime().addSeconds(totalDuration).toString 'H:mm:ss'

                # j = 0
                # for one_marker in legs

                #     content = "<div><b>Date:</b><br/>" + date + "</div>"

                #     start_marker = handler.addMarker
                #         lat:               one_marker.start_location.A
                #         lng:               one_marker.start_location.F
                #         custom_marker:     "<span style='margin-left:15px' class='badge badge-success'>"+(j+1)+"</span>"
                #         position_infowindow: content

                #     handler.bounds.extendWith(start_marker)

                #     end_marker = handler.addMarker
                #         lat:               one_marker.end_location.A
                #         lng:               one_marker.end_location.F
                #         custom_marker:     "<span style='margin-right:15px' class='badge badge-danger'>"+(j+1)+"</span>"
                #         position_infowindow: content

                #     handler.bounds.extendWith(end_marker)
                #     j++


                j = 0
                for one_marker in data

                    status = one_marker.infowindow.split('/')[1]

                    if status == "start" || status == "stop"

                        if status == "start"
                            pin = "<span style='margin-left:15px' class='badge badge-success'>"+(j+1)+"</span>"

                        if status == "stop"
                            pin = "<span style='margin-right:15px' class='badge badge-danger'>"+(j+1)+"</span>"
                            j++

                        content = "<div><b>Date:</b><br/>" + date + "</div>"

                        start_marker = handler.addMarker
                            lat:               one_marker.lat
                            lng:               one_marker.lng
                            custom_marker:     pin
                            position_infowindow: content

                        handler.bounds.extendWith(start_marker)

