

@module "Cars", ->
    class PositionMarkerBuilder extends Gmaps.Google.Builders.Marker
        create_marker: ->
            options = _.extend @marker_options(), @rich_marker_options()
            @serviceObject = new RichMarker options

        rich_marker_options: ->
            marker = document.createElement("div")
            marker.setAttribute('class', 'custom_marker')
            marker.innerHTML = this.args.custom_marker
            _.extend(@marker_options(), { flat: true })
            { content: marker }

        create_infowindow: ->
            return null unless _.isString @args.position_infowindow

            boxText = document.createElement("div")
            boxText.setAttribute("class", 'position_infowindow')
            boxText.innerHTML = @args.position_infowindow
            @infowindow = new InfoBox(@infobox(boxText))

        infobox: (boxText)->
            content: boxText
            pixelOffset: new google.maps.Size(-60,-60)
            boxStyle:
                width: "170px"
                
    class @Maps
        @switch_to_pins : () ->
            window.current_mode = "pins"

            handler = Gmaps.build("Google", builders: { Marker: PositionMarkerBuilder } )
            handler.buildMap { provider: { scrollwheel: false }, internal: { id: gon.map_id }}, ->

                for one_marker, i in gon.data

                    if i == 0 
                        pin = "<img width='36px' height='36px' src='<%= image_path('red_pin.png') %>'>"
                    else if gon.data.length - 1 == i
                        pin = "<img width='36px' height='36px' src='<%= image_path('green_pin.png') %>'>"
                    else
                        pin = "<img width='36px' height='36px' src='<%= image_path('yellow_pin.png') %>'>"

                    content = "<div>" + one_marker.infowindow + "</div>"
                    
                    marker = handler.addMarker
                        lat:               one_marker.lat
                        lng:               one_marker.lng
                        custom_marker:     pin
                        position_infowindow: content
                    handler.bounds.extendWith(marker)

                points = []
                for point, i in gon.data
                    hash = {lat: gon.data[i]["lat"], lng: gon.data[i]["lng"]}
                    console.log hash
                    points[i] = hash

                console.log("points")    
                console.log(points)

                polylines = handler.addPolylines(
                    [
                      points
                    ],
                    { strokeColor: '#FF0000'}
                );

                handler.bounds.extendWith(polylines);
                    
                handler.fitMapToBounds()
                #handler.getMap().setZoom(11)

                window.handler = handler

        @switch_to_directions : () ->
            # Set current map view mode to directions (instead of just showing little markers)
            window.current_mode = "directions"

            handler = Gmaps.build("Google")

            handler.buildMap { provider: { scrollwheel: false }, internal: { id: gon.map_id }}, ->
                window.handler = handler
                window.data = gon.data

            points = []

            for point, i in gon.data
                hash = {lat: gon.data[i]["lat"], lng: gon.data[i]["lng"]}
                console.log hash
                points[i] = hash

            polylines = handler.addPolylines(
                [
                  points
                ],
                { strokeColor: '#FF0000'}
            );

            handler.bounds.extendWith(polylines);
            handler.fitMapToBounds();

            
